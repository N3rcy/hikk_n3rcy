import logging
import asyncio

from telethon import events

from .. import loader, utils

logger = logging.getLogger(name)

@loader.tds
class IrisLabMod(loader.Module):
    """Module for Iris Lab"""

    strings = {
        "name": "Iris Lab",
        "autoinfect_on": "ðŸŸ¢ <b>Autoinfection mode enabled</b>",
        "autoinfect_off": "ðŸ”´ <b>Autoinfection mode disabled</b>",
        "autoinfect_invalid_sign": "ðŸš« <b>Invalid sign specified. Choose +, -, or =</b>",
        "autoinfect_message": "ðŸ¦  <b>Infect</b> {} @iris_black_bot",
    }

    @loader.command(name="autoinfecton", group="iris")
    async def autoinfectoncmd(self, message: Message):
        """Enables autoinfection mode"""
        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(message, self.strings("autoinfect_invalid_sign"))
            return

        sign = args[0]
        if sign not in ["+", "-", "="]:
            await utils.answer(message, self.strings("autoinfect_invalid_sign"))
            return

        self._autoinfect_task = asyncio.ensure_future(self.autoinfect_loop(sign))
        await utils.answer(message, self.strings("autoinfect_on"))

    async def autoinfect_loop(self, sign):
        while True:
            await asyncio.sleep(3600)
            await self._client.send_message(
                "@iris_black_bot", self.strings("autoinfect_message").format(sign)
            )
            await asyncio.sleep(10)

    @loader.command(name="autoinfectoff", group="iris")
    async def autoinfectoffcmd(self, message: Message):
        """Disables autoinfection mode"""
        self._autoinfect_task.cancel()
        await utils.answer(message, self.strings("autoinfect_off"))

