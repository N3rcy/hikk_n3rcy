import os
import google.auth
import googleapiclient.discovery

from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class YouTubeUploaderMod(loader.Module):
    """Uploads a video to YouTube"""

    strings = {
        "name": "YouTube Uploader",
        "uploading": "ðŸš€ <b>Uploading...</b>",
        "uploaded": "ðŸŽ¥ <b>Video uploaded successfully</b>",
        "noargs": "ðŸš« <b>No video specified</b>",
        "err": "ðŸš« <b>Upload error</b>",
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.service = None
        self.auth = None
        self.channel_id = None

    async def ytuploadcmd(self, message: Message):
        """Uploads a video to YouTube"""
        if not self.service:
            self.auth, self.service = self._get_authenticated_services()

        if not self.channel_id:
            channels_response = self.service.channels().list(
                mine=True,
                part="id"
            ).execute()
            channel = channels_response["items"][0]
            self.channel_id = channel["id"]

        file = await self._get_media(message)
        if not file:
            return

        body = {
            "snippet": {
                "categoryId": "22",
                "description": "",
                "title": file.name
            },
            "status": {
                "privacyStatus": "public"
            }
        }
        insert_request = self.service.videos().insert(
            part=",".join(body.keys()),
            body=body,
            media_body=file
        )
        response = None
        result = None
        exception = None
        try:
            response = insert_request.execute()
            result = response.get("id")
        except Exception as e:
            exception = e

        file.close()
        if exception:
            await utils.answer(message, self.strings("err"))
        else:
            video_url = f"https://www.youtube.com/watch?v={result}"
            await utils.answer(
                message,
                self.strings("uploaded").format(video_url)
            )

