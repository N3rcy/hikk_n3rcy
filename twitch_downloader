import logging
import os

import requests
from telethon import events

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class TwitchMod(loader.Module):
    """Downloads streams from Twitch"""
    strings = {"name": "Twitch", "no_url": "ðŸš« Please provide a valid Twitch URL"}

    @loader.unrestricted
    async def twitchcmd(self, message: events.NewMessage.Event) -> None:
        """Usage: .twitch <url>"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("no_url"))
            return

        try:
            stream_url = await self._resolve_url(args[0])
        except ValueError:
            await utils.answer(message, self.strings("no_url"))
            return

        response = requests.get(stream_url, stream=True)
        file_size = int(response.headers.get("Content-Length", 0))
        filename = stream_url.split("/")[-1]

        if response.status_code == 200:
            await message.edit("ðŸ“¥ Downloading...")
            with open(filename, "wb") as f:
                for chunk in response.iter_content(1024):
                    f.write(chunk)

            await message.edit("ðŸ“¤ Uploading...")
            await message.client.send_file(
                message.to_id,
                filename,
                progress_callback=lambda d, t: asyncio.get_event_loop().create_task(
                    self._progress(d, t, message, file_size)
                ),
            )
            os.remove(filename)
        else:
            await utils.answer(message, "ðŸš« Unable to download stream")

    async def _resolve_url(self, url: str) -> str:
        """Resolves the URL of the stream"""
        if not url.startswith("https://www.twitch.tv/"):
            raise ValueError

        response = requests.get(url)
        if response.status_code != 200:
            raise ValueError

        return response.url.replace("https", "http")

    async def _progress(self, current, total, event, file_size):
        """Shows progress of download as a percentage"""
        logger.info(f"Downloaded {current} of {total}")
        if round(current / total * 100) % 10 == 0 or current == total:
            percentage = current * 100 / file_size
            await event.edit(f"ðŸ“¤ Uploading... {round(percentage)}%")

