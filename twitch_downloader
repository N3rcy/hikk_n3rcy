import logging
import re
import requests

from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class TwitchMod(loader.Module):
    """Downloads recordings (replays) of streams from Twitch"""

    strings = {
        "name": "Twitch",
        "downloading": "ðŸ“¥ <b>Downloading {}</b>",
        "download_complete": "ðŸ’¾ <b>Download complete:</b> <code>{}</code>",
        "invalid_url": "ðŸš« <b>Invalid Twitch URL</b>",
        "error": "ðŸš« <b>An error occurred:</b> <code>{}</code>",
    }

    async def twitchcmd(self, message: Message):
        """Usage: .twitch https://www.twitch.tv/videos/video_id"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("invalid_url"))
            return

        video_id = re.search(r"/videos/(\d+)", args)
        if not video_id:
            await utils.answer(message, self.strings("invalid_url"))
            return

        video_id = video_id.group(1)
        video_url = f"https://www.twitch.tv/videos/{video_id}"

        await utils.answer(message, self.strings("downloading").format(video_url))

        try:
            response = requests.get(f"https://api.twitch.tv/kraken/videos/{video_id}", headers={
                "Client-ID": self.get_config("client_id")
            })
            response.raise_for_status()
            data = response.json()

            file_name = data["title"]
            file_url = data["url"]

            response = requests.get(file_url, stream=True)
            response.raise_for_status()

            await message.client.send_file(
                message.peer_id,
                response.raw,
                filename=file_name,
                progress_callback=lambda d, t: asyncio.get_event_loop().create_task(
                    self.update_progress(d, t, message, file_name)
                )
            )
        except Exception as e:
            await utils.answer(message, self.strings("error").format(str(e)))
        else:
            await utils.answer(message, self.strings("download_complete").format(file_name))

    async def update_progress(self, current, total, message, file_name):
        """Updates the progress of the download in a message"""
        if not message.photo:
            await message.edit(
                self.strings("downloading").format(file_name) +
                f"\n{current} of {total}"
            )
